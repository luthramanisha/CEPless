constants {
  coordinates-refresh-interval = 60
  transition-execution-mode = 1 # Can be 0 for "Sequential" or 1 for "Concurrent"
  message-overhead-measurement-interval = 90

  events-per-millis = 1000
}

benchmark {
  general {
    algorithms = ["Pietzuch", "Starks"]
  }

  Pietzuch {
    optimizationCriteria = ["latency", "machineLoad"]
    constraints = ["lowChurnRate"]
    class = "tcep.placement.sbon.PietzuchAlgorithm$"
    score = 100
  }

  Starks {
    optimizationCriteria = ["messsageHops"]
    constraints = ["HighChurnRate"]
    class = "tcep.placement.manets.StarksAlgorithm$"
    score = 100
  }
}

prio-dispatcher{
  mailbox-type = "tcep.akkamailbox$TCEPPriorityMailbox"
}

akka {
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "OFF"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  # logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters-during-shutdown = false

  actor {

    provider = cluster
    warn-about-java-serializer-usage = false
    serializers {
      java = "akka.serialization.JavaSerializer"
      # Define kryo serializer
      kryo = "com.twitter.chill.akka.AkkaSerializer"
    }

    deployment {
      /priomailboxactor {
        mailbox = prio-mailbox
      }
    }

    serialization-bindings {
      "tcep.placement.benchmarking.NetworkChurnRate" = kryo
      "tcep.placement.sbon.PietzuchAlgorithm$" = kryo
      "tcep.placement.manets.StarksAlgorithm$" = kryo
      "tcep.placement.PlacementStrategy" = kryo
      "tcep.graph.QueryGraph" = kryo
      "tcep.graph.transition.MAPEK" = kryo

      "tcep.placement.benchmarking.PlacementAlgorithm" = kryo

      "tcep.graph.transition.StopExecution" = kryo
      "tcep.graph.transition.TransitionRequest" = kryo

      "akka.actor.ActorRef" = kryo
      "tcep.data.Events$" = java
      "tcep.data.Events$Event" = kryo
      "tcep.data.Events$Created$" = kryo
      "tcep.data.Events$DependenciesRequest$" = kryo
      "tcep.data.Events$DependenciesResponse" = kryo

      "tcep.graph.CreatedCallback" = kryo
      "tcep.graph.EventCallback" = kryo

      "tcep.data.Queries$NStream" = kryo
      "tcep.data.Queries$Operator" = kryo
      "tcep.data.Queries$NodeData" = kryo
      "tcep.data.Queries$Requirement" = kryo
      "tcep.data.Queries$Query" = kryo
      "tcep.data.Queries$Window" = kryo

      "tcep.dsl.Dsl$Nanoseconds" = kryo
      "tcep.dsl.Dsl$Milliseconds" = kryo
      "tcep.dsl.Dsl$Seconds" = kryo

      "tcep.dsl.Dsl$TimespanHelper" = kryo

      "tcep.dsl.Dsl$Instances" = kryo

      "tcep.dsl.Dsl$InstancesHelper" = kryo

      "tcep.dsl.Dsl$Ratio" = kryo

      "tcep.dsl.Dsl$FrequencyHelper$" = kryo
      "tcep.dsl.Dsl$FrequencyHelper2" = kryo

      "tcep.dsl.Dsl$LatencyHelper$" = kryo
      "tcep.dsl.Dsl$LatencyHelper2" = kryo

      "tcep.dsl.Dsl$LoadHelper$" = kryo
      "tcep.dsl.Dsl$LoadHelper2" = kryo

      "tcep.dsl.Dsl$MessageOverheadHelper$" = kryo
      "tcep.dsl.Dsl$MessageOverheadHelper2" = kryo


      "tcep.dsl.Dsl$Sequence1Helper" = kryo
      "tcep.dsl.Dsl$Sequence2Helper" = kryo
      "tcep.dsl.Dsl$Sequence3Helper" = kryo
      "tcep.dsl.Dsl$Sequence4Helper" = kryo
      "tcep.dsl.Dsl$Sequence5Helper" = kryo

      "tcep.dsl.Dsl$Query1Helper" = kryo
      "tcep.dsl.Dsl$Query2Helper" = kryo
      "tcep.dsl.Dsl$Query3Helper" = kryo
      "tcep.dsl.Dsl$Query4Helper" = kryo
      "tcep.dsl.Dsl$Query5Helper" = kryo
      "tcep.dsl.Dsl$Query6Helper" = kryo

      "tcep.graph.nodes.traits.Node" = kryo
      "tcep.machinenodes.SubscriberMessages$SubmitQuery$" = kryo

      "tcep.publishers.Publisher$AcknowledgeSubscription$" = kryo
      "tcep.graph.nodes.traits.Node$Subscribe" = kryo
      "tcep.graph.nodes.traits.Node$UnSubscribe" = kryo
      "tcep.graph.nodes.traits.Node$HeartBeat" = kryo

      #"tcep.graph.qos.MonitorFactory" = kryo

      "tcep.graph.qos.PathLatencyMonitor" = kryo
      "tcep.graph.qos.PathLatencyMonitorFactory" = kryo

      "tcep.graph.qos.AverageFrequencyMonitor" = kryo
      "tcep.graph.qos.AverageFrequencyMonitorFactory" = kryo

      "tcep.graph.qos.LoadMonitor" = kryo
      "tcep.graph.qos.LoadMonitorFactory" = kryo

      "tcep.graph.qos.MessageHopsMonitor" = kryo
      "tcep.graph.qos.MessageHopsMonitorFactory" = kryo

      "tcep.graph.qos.TransitionMonitor" = kryo
      "tcep.graph.qos.TransitionMonitorFactory" = kryo

      "scala.collection.immutable.Set$EmptySet$" = kryo
      "scala.collection.immutable.Map$Map3" = kryo
      "scala.collection.immutable.Map$Map4" = kryo
      "scala.collection.immutable.Set$Set2" = kryo
      "scala.collection.immutable.Set$Set1" = kryo
      "scala.collection.immutable.Map$Map1" = kryo
      "scala.None$" = kryo
      "scala.Long" = kryo
      "scala.Long$" = kryo
      "scala.Tuple2" = kryo
      "scala.Function1" = kryo
      #"[Ltcep.graph.qos.MonitorFactory;" = kryo
      "scala.collection.convert.Wrappers$MapWrapper" = kryo

      "akka.remote.Remoting" = kryo
      "akka.remote.RemoteActorRef" = kryo

      "akka.actor.LocalActorRef" = kryo
      "akka.actor.ActorContext" = kryo

      "java.time.Duration" = kryo
      "java.time.Instant" = kryo

      "tcep.placement.vivaldi.ControlMessages" = kryo
      "tcep.placement.vivaldi.Ping" = kryo
      "tcep.placement.benchmarking.SelectPlacementAlgorithm" = kryo
      "tcep.placement.vivaldi.CoordinatesRequest" = kryo

      "tcep.dsl.Dsl$Frequency" = kryo
      "tcep.dsl.Dsl$LatencyMeasurement" = kryo
      "tcep.dsl.Dsl$LoadMeasurement" = kryo
      "tcep.dsl.Dsl$FrequencyMeasurement" = kryo
      "tcep.dsl.Dsl$MessageOverheadMeasurement" = kryo
      "tcep.data.Events$MonitoringData" = kryo

      "tcep.graph.nodes.traits.StartExecutionWithDependencies" = kryo
      "tcep.graph.nodes.traits.StartExecutionWithData" = kryo
      "tcep.graph.nodes.traits.TransferredState" = kryo

      "tcep.graph.transition.StartExecution" = kryo
      "tcep.placement.benchmarking.RegisterForStateUpdate$" = kryo
      "tcep.placement.benchmarking.UpdateState$" = kryo
      "tcep.placement.benchmarking.CancelRegistration$" = kryo

      "scala.collection.immutable.List" = kryo
      "com.espertech.esper.core.service.EPAdministratorImpl" = kryo
      "tcep.machinenodes.helper.actors.LoadRequest" = kryo
      "tcep.placement.HostInfo" = kryo

      "org.discovery.vivaldi.VivaldiPosition" = kryo
      "org.discovery.vivaldi.Coordinates" = kryo
      "org.discovery.vivaldi.UpdateCoordinates" = kryo
      "customoperators.CustomOperatorInterface" = kryo
      "customoperators.CustomOperatorInterface$" = kryo
    }
  }
  remote {
    # If this is "on", Akka will log all outbound messages at DEBUG level,
    # if off then they are not logged
    log-sent-messages = off
    log-remote-lifecycle-events = off
    maximum-payload-bytes = 30000000 bytes
    netty.tcp {
      # hostname = "127.0.0.1"
      bind-hostname = "0.0.0.0"
      #port = 0
      message-frame-size =  30000000b
      send-buffer-size =  30000000b
      receive-buffer-size =  30000000b
      maximum-frame-size = 30000000b
    }
  }
  cluster {
    seed-nodes = [
      #Names will be resolved by Docker Network. See runproject.sh for more details.
      "akka.tcp://"${clustering.cluster.name}"@127.0.0.1:2549", #viv
      "akka.tcp://"${clustering.cluster.name}"@127.0.0.1:2550" #benchmark
      ]
  }
}

clustering {
  cluster.name = tcep
}

simulation {
  host = "127.0.0.1"
  port = "2566"
}


# Disable legacy metrics in akka-cluster.
akka.cluster.metrics.enabled=off

# Enable metrics extension in akka-cluster-metrics.
akka.extensions=["akka.cluster.metrics.ClusterMetricsExtension"]

# Sigar native library extract location during tests.
# Note: use per-jvm-instance folder when running multiple jvm on one host.
akka.cluster.metrics.native-library-extract-folder=${user.dir}/target/native
